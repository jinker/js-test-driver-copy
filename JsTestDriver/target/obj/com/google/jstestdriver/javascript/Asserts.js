function expectAsserts(a){jstestdriver.expectedAssertCount=a}var fail=function fail(b){var a=new Error(b);a.name="AssertError";if(!a.message){a.message=b}throw a};function isBoolean_(a){if(typeof(a)!="boolean"){fail("Not a boolean: "+prettyPrintEntity_(a))}}var isElement_=(function(){var c=document.createElement("div");function b(f){try{c.appendChild(f);c.removeChild(f)}catch(d){return false}return true}return function a(d){return d&&d.nodeType===1&&b(d)}}());function formatElement_(f){var d;try{d=f.tagName.toLowerCase();var j="<"+d;var b=f.attributes,g;for(var c=0,a=b.length;c<a;c++){g=b.item(c);if(!!g.nodeValue){j+=" "+g.nodeName+'="'+g.nodeValue+'"'}}return j+">...</"+d+">"}catch(h){return"[Element]"+(!!d?" "+d:"")}}function prettyPrintEntity_(a){if(isElement_(a)){return formatElement_(a)}var c;if(typeof a=="function"){try{c=a.toString().match(/(function [^\(]+\(\))/)[1]}catch(b){}return c||"[function]"}try{c=JSON.stringify(a)}catch(b){}return c||"["+typeof a+"]"}function argsWithOptionalMsg_(b,e){var a=[];for(var d=0;d<b.length;d++){a.push(b[d])}var c=e-1;if(b.length<c){fail("expected at least "+c+" arguments, got "+b.length)}else{if(b.length==e){a[0]+=" "}else{a.unshift("")}}return a}function assertTrue(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;isBoolean_(a[1]);if(a[1]!=true){fail(a[0]+"expected true but was "+prettyPrintEntity_(a[1]))}return true}function assertFalse(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;isBoolean_(a[1]);if(a[1]!=false){fail(a[0]+"expected false but was "+prettyPrintEntity_(a[1]))}return true}function assertEquals(c,b,d){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;c=a[0];b=a[1];d=a[2];if(!compare_(b,d)){fail(c+"expected "+prettyPrintEntity_(b)+" but was "+prettyPrintEntity_(d)+"")}return true}function compare_(g,j){if(g===j){return true}if(typeof g!="object"||typeof j!="object"||!g||!j){return g==j}if(isElement_(g)||isElement_(j)){return false}var d=null;var f=0;var b=0;try{if(jstestdriver.jQuery.isArray(j)){f=j.length}else{for(d in j){if(j.hasOwnProperty(d)){++f}}}if(f==0&&typeof j.length=="number"){f=j.length;for(var c=0,a=f;c<a;c++){if(!(c in j)){f=0;break}}}for(d in g){if(g.hasOwnProperty(d)){if(!compare_(g[d],j[d])){return false}++b}}if(b!=f){return false}return b==0?g.toString()==j.toString():true}catch(h){return false}}function assertNotEquals(d,b,f){try{assertEquals.apply(this,arguments)}catch(c){if(c.name=="AssertError"){return true}throw c}var a=argsWithOptionalMsg_(arguments,3);fail(a[0]+"expected "+prettyPrintEntity_(a[1])+" not to be equal to "+prettyPrintEntity_(a[2]))}function assertSame(c,b,d){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(!isSame_(a[2],a[1])){fail(a[0]+"expected "+prettyPrintEntity_(a[1])+" but was "+prettyPrintEntity_(a[2]))}return true}function assertNotSame(c,b,d){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(isSame_(a[2],a[1])){fail(a[0]+"expected not same as "+prettyPrintEntity_(a[1])+" but was "+prettyPrintEntity_(a[2]))}return true}function isSame_(a,b){return b===a}function assertNull(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(a[1]!==null){fail(a[0]+"expected null but was "+prettyPrintEntity_(a[1]))}return true}function assertNotNull(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(a[1]===null){fail(a[0]+"expected not null but was null")}return true}function assertUndefined(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(typeof a[1]!="undefined"){fail(a[2]+"expected undefined but was "+prettyPrintEntity_(a[1]))}return true}function assertNotUndefined(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(typeof a[1]=="undefined"){fail(a[0]+"expected not undefined but was undefined")}return true}function assertNaN(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(!isNaN(a[1])){fail(a[0]+"expected to be NaN but was "+a[1])}return true}function assertNotNaN(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(isNaN(a[1])){fail(a[0]+"expected not to be NaN")}return true}function assertException(c,d,a){if(arguments.length==1){d=c;c=""}else{if(arguments.length==2){if(typeof d!="function"){a=d;d=c;c=""}else{c+=" "}}else{c+=" "}}jstestdriver.assertCount++;try{d()}catch(b){if(b.name=="AssertError"){throw b}if(a&&b.name!=a){fail(c+"expected to throw "+a+" but threw "+b.name)}return true}fail(c+"expected to throw exception")}function assertNoException(c,d){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;try{a[1]()}catch(b){fail(a[0]+"expected not to throw exception, but threw "+b.name+" ("+b.message+")")}}function assertArray(b,c){var a=argsWithOptionalMsg_(arguments,2);jstestdriver.assertCount++;if(!jstestdriver.jQuery.isArray(a[1])){fail(a[0]+"expected to be array, but was "+prettyPrintEntity_(a[1]))}}function assertTypeOf(d,b,c){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;var e=typeof a[2];if(e!=a[1]){fail(a[0]+"expected to be "+a[1]+" but was "+e)}return true}function assertBoolean(b,c){var a=argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"boolean",a[1])}function assertFunction(b,c){var a=argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"function",a[1])}function assertObject(b,c){var a=argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"object",a[1])}function assertNumber(b,c){var a=argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"number",a[1])}function assertString(b,c){var a=argsWithOptionalMsg_(arguments,2);return assertTypeOf(a[0],"string",a[1])}function assertMatch(e,d,f){var b=argsWithOptionalMsg_(arguments,3);var c=typeof b[2]=="undefined";jstestdriver.assertCount++;var a;if(c||!b[1].test(b[2])){f=(c?a:prettyPrintEntity_(b[2]));fail(b[0]+"expected "+f+" to match "+b[1])}return true}function assertNoMatch(c,b,d){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(a[1].test(a[2])){fail(a[0]+"expected "+prettyPrintEntity_(a[2])+" not to match "+a[1])}return true}function assertTagName(d,c,b){var a=argsWithOptionalMsg_(arguments,3);var e=a[2]&&a[2].tagName;if(String(e).toUpperCase()!=a[1].toUpperCase()){fail(a[0]+"expected tagName to be "+a[1]+" but was "+e)}return true}function assertClassName(g,c,b){var a=argsWithOptionalMsg_(arguments,3);var h=a[2]&&a[2].className;var d=new RegExp("(^|\\s)"+a[1]+"(\\s|$)");try{assertMatch(a[0],d,h)}catch(f){h=prettyPrintEntity_(h);fail(a[0]+"expected class name to include "+prettyPrintEntity_(a[1])+" but was "+h)}return true}function assertElementId(c,e,b){var a=argsWithOptionalMsg_(arguments,3);var d=a[2]&&a[2].id;jstestdriver.assertCount++;if(d!==a[1]){fail(a[0]+"expected id to be "+a[1]+" but was "+d)}return true}function assertInstanceOf(e,c,f){jstestdriver.assertCount++;var a=argsWithOptionalMsg_(arguments,3);var b=prettyPrintEntity_(a[2]);var d=a[1]&&a[1].name||a[1];if(a[2]==null){fail(a[0]+"expected "+b+" to be instance of "+d)}if(!(Object(a[2]) instanceof a[1])){fail(a[0]+"expected "+b+" to be instance of "+d)}return true}function assertNotInstanceOf(e,c,f){var a=argsWithOptionalMsg_(arguments,3);jstestdriver.assertCount++;if(Object(a[2]) instanceof a[1]){var d=a[1]&&a[1].name||a[1];var b=prettyPrintEntity_(a[2]);fail(a[0]+"expected "+b+" not to be instance of "+d)}return true}function assertEqualsDelta(c,b,e,d){var a=this.argsWithOptionalMsg_(arguments,4);jstestdriver.assertCount++;c=a[0];b=a[1];e=a[2];d=a[3];if(!compareDelta_(b,e,d)){this.fail(c+"expected "+d+" within "+this.prettyPrintEntity_(b)+" but was "+this.prettyPrintEntity_(e)+"")}return true}function compareDelta_(c,h,j){var k=function(l,i,n){return Math.abs(l-i)<=n};if(c===h){return true}if(typeof c=="number"||typeof h=="number"||!c||!h){return k(c,h,j)}if(isElement_(c)||isElement_(h)){return false}var g=null;var f=0;var m=0;try{if(jstestdriver.jQuery.isArray(h)){f=h.length}else{for(g in h){if(h.hasOwnProperty(g)){++f}}}if(f==0&&typeof h.length=="number"){f=h.length;for(var b=0,a=f;b<a;b++){if(!(b in h)){f=0;break}}}for(g in c){if(c.hasOwnProperty(g)){if(!compareDelta_(c[g],h[g],j)){return false}++m}}if(m!=f){return false}return m==0?c.toString()==h.toString():true}catch(d){return false}}var assert=assertTrue;